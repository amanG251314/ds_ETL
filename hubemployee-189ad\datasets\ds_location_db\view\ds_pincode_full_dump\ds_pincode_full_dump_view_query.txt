with 
raw_data as (
select
*
FROM `hubemployee-189ad.ds_location_db.ds_raw_dump` 
),

partition_work as (
  SELECT 
  Pincode, 
  District, 
  count(1) as cnt 
  FROM raw_data 
group by 
Pincode, 
District
),
pincode_district_mapping as (
  select 
last_row.Pincode as pincode,
last_row.District as district,
from 
  (
  select
    Pincode,
    array_agg(t order by cnt desc limit 1)[safe_offset(0)] as last_row
  from partition_work AS t
    group by 1
  )
),
processed_data as(select 
raw_data.*,
pincode_district_mapping.pincode as joined_pincode,
pincode_district_mapping.District as joined_district,
from raw_data
left join pincode_district_mapping on 
(
  raw_data.pincode = pincode_district_mapping.pincode and 
  raw_data.District = pincode_district_mapping.District
)
where 
pincode_district_mapping.pincode is not null
order by 
uid)

select
Pincode as pincode,
District as district,
first_row.StateName as state,
ifnull(ifnull(first_row.Lat_GMAP, first_row.lat_osm), cast(first_row.Latitude as float64)) as lat_location,
ifnull(ifnull(first_row.Long_GMAP, first_row.long_osm), cast(first_row.Longitude as float64)) as long_location,
from (
  select
  Pincode,
  District,
  array_agg(t order by uid limit 1)[safe_offset(0)] as first_row
from processed_data AS t
  group by 1, 2
)

