field_name,type,mode
Id,INTEGER,NULLABLE
CN__,STRING,NULLABLE
CPR_Number,STRING,NULLABLE
Status,STRING,NULLABLE
Pickup_Attempts,INTEGER,NULLABLE
Delivery_Attempts,INTEGER,NULLABLE
Created_At,TIMESTAMP,NULLABLE
Last_Event_Time,TIMESTAMP,NULLABLE
Is_COD,BOOLEAN,NULLABLE
Geocoded_Destination_Address,STRING,NULLABLE
Amount_to_be_Paid,INTEGER,NULLABLE
Payment_Mode,STRING,NULLABLE
In_Favour_Of,STRING,NULLABLE
Amount_Collected,FLOAT,NULLABLE
Is_International,BOOLEAN,NULLABLE
Reverse_Reference_Number,STRING,NULLABLE
IS_RTO,BOOLEAN,NULLABLE
Load_Type,STRING,NULLABLE
Service_Type_Id,STRING,NULLABLE
Service_Type,STRING,NULLABLE
_Current_Hub,STRING,NULLABLE
Openbox_RVP,STRING,NULLABLE
Customer_Code,STRING,NULLABLE
Customer_Name,STRING,NULLABLE
Customer_Reference_Number,INTEGER,NULLABLE
Manifest_Number,STRING,NULLABLE
Manifest_Time,STRING,NULLABLE
Weight__In_kg_,INTEGER,NULLABLE
Input_Weight,INTEGER,NULLABLE
Consignment_Description,STRING,NULLABLE
Volumetric_Weight,INTEGER,NULLABLE
Chargeable_Weight,STRING,NULLABLE
Height,STRING,NULLABLE
Width,STRING,NULLABLE
Length,STRING,NULLABLE
Input_Height,STRING,NULLABLE
Input_Width,STRING,NULLABLE
Input_Length,STRING,NULLABLE
Number_Of_pieces,INTEGER,NULLABLE
Receiver_Name,STRING,NULLABLE
Alternate_Receiver_Details,STRING,NULLABLE
Receiver_Phone,STRING,NULLABLE
Receiver_Detail,STRING,NULLABLE
Mode_of_Pickup,STRING,NULLABLE
POD_Image,STRING,NULLABLE
Signature_Image,STRING,NULLABLE
Delivery_KYC_Type,STRING,NULLABLE
Delivery_KYC_Number,STRING,NULLABLE
Rescheduled_Date,DATE,NULLABLE
Expected_Delivery_Date,STRING,NULLABLE
Price,STRING,NULLABLE
E_way_Bill,STRING,NULLABLE
Risk_Surcharge_Type,STRING,NULLABLE
Pickup_Name,STRING,NULLABLE
Pickup_Phone,STRING,NULLABLE
Sender_Email,STRING,NULLABLE
Pickup_Street_Name,STRING,NULLABLE
Pickup_Address_Line_2,STRING,NULLABLE
Pickup_City,STRING,NULLABLE
Sender_State,STRING,NULLABLE
Sender_Country,STRING,NULLABLE
Pickup_Pincode,INTEGER,NULLABLE
Destination_Name,STRING,NULLABLE
Delivery_Phone,STRING,NULLABLE
Destination_Address_Line_1,STRING,NULLABLE
Destination_Address_Line_2,STRING,NULLABLE
Destination_Address_Line_3,STRING,NULLABLE
Destination_Address_Line_4,STRING,NULLABLE
Destination_City,STRING,NULLABLE
Destination_State,STRING,NULLABLE
Destination_Country,STRING,NULLABLE
Destination_Pincode,INTEGER,NULLABLE
Delivery_Time_Slot,STRING,NULLABLE
Current_Worker,STRING,NULLABLE
Hub_Arrival_Time,TIMESTAMP,NULLABLE
Completed_Time,TIMESTAMP,NULLABLE
Last_Delivery_Attempt_Time,TIMESTAMP,NULLABLE
NDR_Reason,STRING,NULLABLE
Pickup_Charge,FLOAT,NULLABLE
Risk_Surcharge_Applicable,STRING,NULLABLE
Delivery_Charge,STRING,NULLABLE
AWB_,STRING,NULLABLE
Order_,STRING,NULLABLE
Carrier,STRING,NULLABLE
Destination_Email,STRING,NULLABLE
False_attempt_Count,STRING,NULLABLE
Is_False_Attempt,BOOLEAN,NULLABLE
Tag_List,STRING,NULLABLE
Time_since_last_scan,STRING,NULLABLE
Time_Since_Delivery,STRING,NULLABLE
Time_Since_First_Attempt,STRING,NULLABLE
First_Delivery_Attempt,TIMESTAMP,NULLABLE
Second_Delivery_Attempt,TIMESTAMP,NULLABLE
Third_Delivery_Attempt,STRING,NULLABLE
Last_Attempt_Time,STRING,NULLABLE
Time_Since_Last_Attempt,STRING,NULLABLE
Transit_Days,INTEGER,NULLABLE
Customer_Next_Steps,STRING,NULLABLE
RTO_Time,STRING,NULLABLE
Time_Since_RTO,STRING,NULLABLE
Remarks_For_Carrier,STRING,NULLABLE
False_Delivery,STRING,NULLABLE
Rating,STRING,NULLABLE
Carrier_NDR,STRING,NULLABLE
Internal_NDR,STRING,NULLABLE
Feedback_Text,STRING,NULLABLE
Shipper_Next_Steps,STRING,NULLABLE
IVR_Customer_Next_Steps,STRING,NULLABLE
Current_Hub_Name,STRING,NULLABLE
Webapp_Customer_Next_Steps,STRING,NULLABLE
Webapp_False_Attempt,STRING,NULLABLE
IVR_False_Attempt,STRING,NULLABLE
Feedback_Reason_List,STRING,NULLABLE
Trip_Reference_Number,STRING,NULLABLE
Shelf_Number,STRING,NULLABLE
HV_ID_Number,STRING,NULLABLE
HV_Name,STRING,NULLABLE
HV_ID_Expiration,STRING,NULLABLE
HV_ID_Place_of_Issue,STRING,NULLABLE
HV_Nationality,STRING,NULLABLE
HV_Mobile_Number,STRING,NULLABLE
HV_Amount,STRING,NULLABLE
HV_Billed_To_Merchant,STRING,NULLABLE
HS_Code,STRING,NULLABLE
Prepaid_Amount,STRING,NULLABLE
Notes,STRING,NULLABLE
Partial_Delivery,BOOLEAN,NULLABLE
Movement_Type,STRING,NULLABLE
Current_Delivery_Name,STRING,NULLABLE
Current_Delivery_Pincode,STRING,NULLABLE
All_pieces_in_same_bag,STRING,NULLABLE
No_piece_missing,STRING,NULLABLE
Dimensions,STRING,NULLABLE
Input_Dimensions,STRING,NULLABLE
Destination_Address,STRING,NULLABLE
Destination_Zone,STRING,NULLABLE
Sender_Zone,STRING,NULLABLE
Sender_Address,STRING,NULLABLE
Proximity,STRING,NULLABLE
Order_Type,STRING,NULLABLE
Upcountry_Hub_Name,STRING,NULLABLE
Primary_Trip_No,STRING,NULLABLE
Secondary_Trip_No,STRING,NULLABLE
Stock_Transfer,STRING,NULLABLE
Rescheduled_Reason,STRING,NULLABLE
Order_Service_Time_mins_,FLOAT,NULLABLE
Destination_Pincode_City,STRING,NULLABLE
SO_Number,STRING,NULLABLE
Consignment_Type,STRING,NULLABLE
Pickup_Time,STRING,NULLABLE
NPR_Reason,STRING,NULLABLE
CNV_Status,STRING,NULLABLE
Parent_CN__,STRING,NULLABLE
Parent_CN_Status,STRING,NULLABLE
Payment_Transaction_ID,STRING,NULLABLE
Declaration_Value,STRING,NULLABLE
Next_Hub,STRING,NULLABLE
Trip_Assigned,STRING,NULLABLE
Origin_Hub,STRING,NULLABLE
Origin_Hub_Name,STRING,NULLABLE
Holding_Hub,STRING,NULLABLE
Destination_Hub,STRING,NULLABLE
Last_Outscan_Hub,STRING,NULLABLE
Last_Outscan_TimeStamp,STRING,NULLABLE
Execution_Status,STRING,NULLABLE
Exception_Name,STRING,NULLABLE
CN_Leg,STRING,NULLABLE
CN_Direction,STRING,NULLABLE
Credit_Note_URL,STRING,NULLABLE
Shipping_Charges_Paid,STRING,NULLABLE
Shipping_Payment_Details,STRING,NULLABLE
Shipping_Payment_Mode,STRING,NULLABLE
Shipping_Transaction_ID,STRING,NULLABLE
Payment_Cleared,BOOLEAN,NULLABLE
Delivery_Trip_No,STRING,NULLABLE
Pickup_Trip_No_,STRING,NULLABLE
MM_trip_No,STRING,NULLABLE
Forward_Reference_Number,STRING,NULLABLE
Handed_Over_to_3PL,BOOLEAN,NULLABLE
Destination_Address_1,STRING,NULLABLE
Latest_Event_Notes,STRING,NULLABLE
Consignee_Code,STRING,NULLABLE
Consignor_Code,STRING,NULLABLE
First_Inscan_at_Hub_Time,STRING,NULLABLE
Actual_Pickup_Lat,FLOAT,NULLABLE
Actual_Pickup_Long,FLOAT,NULLABLE
Actual_Delivery_Lat,FLOAT,NULLABLE
Actual_Delivery_Long,FLOAT,NULLABLE
Punched_Pickup_Lat,STRING,NULLABLE
Punched_Pickup_Long,STRING,NULLABLE
Punched_Delivered_Lat,FLOAT,NULLABLE
Punched_Delivered_Long,FLOAT,NULLABLE
Is_Hand_Delivered,STRING,NULLABLE
Payment_Cleared_Date,STRING,NULLABLE
Delivery_Location,STRING,NULLABLE
Remittance_Status,STRING,NULLABLE
Bank_Settlement_Status,STRING,NULLABLE
COD_Settlement_Status,STRING,NULLABLE
Latest_CNV_Done_By,STRING,NULLABLE
First_Unsuccessful_PickUp_Attempt_Lng,STRING,NULLABLE
First_Unsuccessful_PickUp_Attempt_Lat,STRING,NULLABLE
First_Unsuccessful_Delivery_Attempt_Lat,FLOAT,NULLABLE
First_Unsuccessful_Delivery_Attempt_Lng,FLOAT,NULLABLE
Type_Of_Delivery,STRING,NULLABLE
Kirana_Hub_Code,STRING,NULLABLE
Delivered_to_Store,BOOLEAN,NULLABLE
Rider_Name,STRING,NULLABLE
Pickup_Worker_Name,STRING,NULLABLE
Pickup_Worker_Code,STRING,NULLABLE
Customer_Civil_Id,STRING,NULLABLE
Receiver_Civil_Id,STRING,NULLABLE
Call_Log_Status,STRING,NULLABLE
Call_Status,STRING,NULLABLE
Invoice_Number,STRING,NULLABLE
Commodity_Name,STRING,NULLABLE
Request_Status,STRING,NULLABLE
Updated_Destination_Address,STRING,NULLABLE
Scheduled_At,TIMESTAMP,NULLABLE
Arrival_Time,TIMESTAMP,NULLABLE
Rescheduled_Timeslot,STRING,NULLABLE
Carrier_Account,STRING,NULLABLE
Paid_By_Cash,FLOAT,NULLABLE
Paid_By_Card,FLOAT,NULLABLE
IMEI_1,STRING,NULLABLE
Device_1,STRING,NULLABLE
IMEI_2,STRING,NULLABLE
Device_2,STRING,NULLABLE
IMEI_3,STRING,NULLABLE
Device_3,STRING,NULLABLE
SIM_Number,STRING,NULLABLE
First_Delivery_Attempt_NDR,STRING,NULLABLE
Second_Delivery_Attempt_NDR,STRING,NULLABLE
Third_Delivery_Attempt_NDR,STRING,NULLABLE
Model_Code,STRING,NULLABLE
Item_Category,STRING,NULLABLE
Item_Size,STRING,NULLABLE
PGI_Event_Time,STRING,NULLABLE
Delivered_Time,TIMESTAMP,NULLABLE
Document_Link,STRING,NULLABLE
Bag_Reference_Number,STRING,NULLABLE
External_Status,STRING,NULLABLE
Vat_Charge,STRING,NULLABLE
Proof_of_Pickup_Image,STRING,NULLABLE
Promised_Delivery_Date,STRING,NULLABLE
RIBD,STRING,NULLABLE
Third_Party_Rider_Name,STRING,NULLABLE
Third_Party_Rider_Phone,STRING,NULLABLE
Is_Dangerous_Good,STRING,NULLABLE
Is_Cold_Storage,STRING,NULLABLE
Allocation_Tags,STRING,NULLABLE
Call_Reschedule_Date,STRING,NULLABLE
Quantity,STRING,NULLABLE
Rider_Comment,STRING,NULLABLE
AK_Number,STRING,NULLABLE
Remittance_Bank_Transaction_Id,STRING,NULLABLE
CN_Volume__in_m___,STRING,NULLABLE
Input_CN_Volume__in_m___,STRING,NULLABLE
Partial_Pickedup,BOOLEAN,NULLABLE
Job_Status,STRING,NULLABLE
COD_Currency,STRING,NULLABLE
Card_Network,STRING,NULLABLE
Card_Transaction_Id,STRING,NULLABLE
Movement_Classification,STRING,NULLABLE
Latest_Delivery_Geocode_Difference__In_KM_,FLOAT,NULLABLE
Latest_Pickup_Geocode_Difference__In_KM_,STRING,NULLABLE
Delivery_Worker_Name,STRING,NULLABLE
Delivery_Worker_Code,STRING,NULLABLE
